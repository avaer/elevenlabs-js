/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../src/Client";
import * as ElevenLabs from "../../src/api/index";

describe("Usage", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { time: [1738252091000, 1739404800000], usage: { All: [49, 1053] } };
        server
            .mockEndpoint()
            .get("/v1/usage/character-stats")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.usage.get({
            startUnix: 1,
            endUnix: 1,
            includeWorkspaceMetrics: true,
            breakdownType: "none",
            aggregationInterval: "hour",
            aggregationBucketSize: 1,
            metric: "credits",
        });
        expect(response).toEqual({
            time: [1738252091000, 1739404800000],
            usage: {
                All: [49, 1053],
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/usage/character-stats")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.usage.get({
                startUnix: 1,
                endUnix: 1,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
