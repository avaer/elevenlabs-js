/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";
import * as ElevenLabs from "../../../../src/api/index";

describe("Tools", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            success: true,
            tools: [
                {
                    name: "weather_by_zapier_get_current",
                    title: "title",
                    description: "Gets current weather conditions for a location.",
                    inputSchema: {
                        properties: {
                            latitude: { description: "Latitude", type: "string" },
                            longitude: { description: "Longitude", type: "string" },
                        },
                        required: ["latitude", "longitude"],
                        type: "object",
                    },
                    outputSchema: { key: "value" },
                    _meta: { key: "value" },
                },
                {
                    name: "tool2",
                    title: "title",
                    description: "Description of tool2",
                    inputSchema: { properties: {}, type: "object" },
                    outputSchema: { key: "value" },
                    _meta: { key: "value" },
                },
            ],
            error_message: "error_message",
        };
        server
            .mockEndpoint()
            .get("/v1/convai/mcp-servers/mcp_server_id/tools")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.mcpServers.tools.list("mcp_server_id");
        expect(response).toEqual({
            success: true,
            tools: [
                {
                    name: "weather_by_zapier_get_current",
                    title: "title",
                    description: "Gets current weather conditions for a location.",
                    inputSchema: {
                        properties: {
                            latitude: {
                                description: "Latitude",
                                type: "string",
                            },
                            longitude: {
                                description: "Longitude",
                                type: "string",
                            },
                        },
                        required: ["latitude", "longitude"],
                        type: "object",
                    },
                    outputSchema: {
                        key: "value",
                    },
                    meta: {
                        key: "value",
                    },
                },
                {
                    name: "tool2",
                    title: "title",
                    description: "Description of tool2",
                    inputSchema: {
                        properties: {},
                        type: "object",
                    },
                    outputSchema: {
                        key: "value",
                    },
                    meta: {
                        key: "value",
                    },
                },
            ],
            errorMessage: "error_message",
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/convai/mcp-servers/mcp_server_id/tools")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.mcpServers.tools.list("mcp_server_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
