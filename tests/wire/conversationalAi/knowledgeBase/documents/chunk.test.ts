/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../../src/Client";
import * as ElevenLabs from "../../../../../src/api/index";

describe("Chunk", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { id: "id", name: "name", content: "content" };
        server
            .mockEndpoint()
            .get("/v1/convai/knowledge-base/21m00Tcm4TlvDq8ikWAM/chunk/chunk_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.knowledgeBase.documents.chunk.get(
            "21m00Tcm4TlvDq8ikWAM",
            "chunk_id",
        );
        expect(response).toEqual({
            id: "id",
            name: "name",
            content: "content",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/convai/knowledge-base/documentation_id/chunk/chunk_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.knowledgeBase.documents.chunk.get("documentation_id", "chunk_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
