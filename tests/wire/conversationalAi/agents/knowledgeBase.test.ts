/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";
import * as ElevenLabs from "../../../../src/api/index";

describe("KnowledgeBase", () => {
    test("size (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { number_of_pages: 1.1 };
        server
            .mockEndpoint()
            .get("/v1/convai/agent/agent_id/knowledge-base/size")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.agents.knowledgeBase.size("agent_id");
        expect(response).toEqual({
            numberOfPages: 1.1,
        });
    });

    test("size (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/convai/agent/agent_id/knowledge-base/size")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.agents.knowledgeBase.size("agent_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
