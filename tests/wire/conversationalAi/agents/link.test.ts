/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";
import * as ElevenLabs from "../../../../src/api/index";

describe("Link", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            agent_id: "J3Pbu5gP6NNKBscdCdwB",
            token: {
                agent_id: "agent_J3Pbu5gP6NNKBscdCdwB",
                conversation_token: "1234567890",
                expiration_time_unix_secs: 1716153600,
                conversation_id: "conv_J3Pbu5gP6NNKBscdCdwB",
                purpose: "signed_url",
            },
        };
        server
            .mockEndpoint()
            .get("/v1/convai/agents/21m00Tcm4TlvDq8ikWAM/link")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.agents.link.get("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            agentId: "J3Pbu5gP6NNKBscdCdwB",
            token: {
                agentId: "agent_J3Pbu5gP6NNKBscdCdwB",
                conversationToken: "1234567890",
                expirationTimeUnixSecs: 1716153600,
                conversationId: "conv_J3Pbu5gP6NNKBscdCdwB",
                purpose: "signed_url",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/convai/agents/agent_id/link")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.agents.link.get("agent_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
