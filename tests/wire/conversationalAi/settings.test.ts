/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ElevenLabsClient } from "../../../src/Client";

describe("Settings", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });

        const rawResponseBody = {
            conversation_initiation_client_data_webhook: {
                url: "https://example.com/webhook",
                request_headers: { "Content-Type": "application/json" },
            },
            webhooks: { post_call_webhook_id: "post_call_webhook_id" },
            can_use_mcp_servers: true,
            rag_retention_period_days: 1,
        };
        server
            .mockEndpoint()
            .get("/v1/convai/settings")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.settings.get();
        expect(response).toEqual({
            conversationInitiationClientDataWebhook: {
                url: "https://example.com/webhook",
                requestHeaders: {
                    "Content-Type": "application/json",
                },
            },
            webhooks: {
                postCallWebhookId: "post_call_webhook_id",
            },
            canUseMcpServers: true,
            ragRetentionPeriodDays: 1,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            conversation_initiation_client_data_webhook: {
                url: "https://example.com/webhook",
                request_headers: { "Content-Type": "application/json" },
            },
            webhooks: { post_call_webhook_id: "post_call_webhook_id" },
            can_use_mcp_servers: true,
            rag_retention_period_days: 1,
        };
        server
            .mockEndpoint()
            .patch("/v1/convai/settings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.settings.update();
        expect(response).toEqual({
            conversationInitiationClientDataWebhook: {
                url: "https://example.com/webhook",
                requestHeaders: {
                    "Content-Type": "application/json",
                },
            },
            webhooks: {
                postCallWebhookId: "post_call_webhook_id",
            },
            canUseMcpServers: true,
            ragRetentionPeriodDays: 1,
        });
    });
});
