/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";
import * as ElevenLabs from "../../../src/api/index";

describe("PhoneNumbers", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                provider: "twilio",
                phone_number: "+1234567890",
                label: "Customer Support",
                supports_inbound: true,
                supports_outbound: true,
                phone_number_id: "phone_123",
                assigned_agent: { agent_id: "F3Pbu5gP6NNKBscdCdwB", agent_name: "My Agent" },
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/convai/phone-numbers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.list();
        expect(response).toEqual([
            {
                provider: "twilio",
                phoneNumber: "+1234567890",
                label: "Customer Support",
                supportsInbound: true,
                supportsOutbound: true,
                phoneNumberId: "phone_123",
                assignedAgent: {
                    agentId: "F3Pbu5gP6NNKBscdCdwB",
                    agentName: "My Agent",
                },
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/convai/phone-numbers")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.phoneNumbers.list();
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            provider: "twilio",
            phone_number: "phone_number",
            label: "label",
            sid: "sid",
            token: "token",
        };
        const rawResponseBody = { phone_number_id: "phone_number_id" };
        server
            .mockEndpoint()
            .post("/v1/convai/phone-numbers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.create({
            provider: "twilio",
            phoneNumber: "phone_number",
            label: "label",
            sid: "sid",
            token: "token",
        });
        expect(response).toEqual({
            phoneNumberId: "phone_number_id",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            provider: "twilio",
            phone_number: "phone_number",
            label: "label",
            supports_inbound: undefined,
            supports_outbound: undefined,
            sid: "sid",
            token: "token",
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/convai/phone-numbers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.phoneNumbers.create({
                provider: "twilio",
                phoneNumber: "phone_number",
                label: "label",
                supportsInbound: undefined,
                supportsOutbound: undefined,
                sid: "sid",
                token: "token",
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            provider: "twilio",
            phone_number: "+1234567890",
            label: "Customer Support",
            supports_inbound: true,
            supports_outbound: true,
            phone_number_id: "phone_123",
            assigned_agent: { agent_id: "F3Pbu5gP6NNKBscdCdwB", agent_name: "My Agent" },
        };
        server
            .mockEndpoint()
            .get("/v1/convai/phone-numbers/TeaqRRdTcIfIu2i7BYfT")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.get("TeaqRRdTcIfIu2i7BYfT");
        expect(response).toEqual({
            provider: "twilio",
            phoneNumber: "+1234567890",
            label: "Customer Support",
            supportsInbound: true,
            supportsOutbound: true,
            phoneNumberId: "phone_123",
            assignedAgent: {
                agentId: "F3Pbu5gP6NNKBscdCdwB",
                agentName: "My Agent",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/convai/phone-numbers/phone_number_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.phoneNumbers.get("phone_number_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/convai/phone-numbers/TeaqRRdTcIfIu2i7BYfT")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.delete("TeaqRRdTcIfIu2i7BYfT");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v1/convai/phone-numbers/phone_number_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.phoneNumbers.delete("phone_number_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            provider: "twilio",
            phone_number: "+1234567890",
            label: "Customer Support",
            supports_inbound: true,
            supports_outbound: true,
            phone_number_id: "phone_123",
            assigned_agent: { agent_id: "F3Pbu5gP6NNKBscdCdwB", agent_name: "My Agent" },
        };
        server
            .mockEndpoint()
            .patch("/v1/convai/phone-numbers/TeaqRRdTcIfIu2i7BYfT")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.update("TeaqRRdTcIfIu2i7BYfT");
        expect(response).toEqual({
            provider: "twilio",
            phoneNumber: "+1234567890",
            label: "Customer Support",
            supportsInbound: true,
            supportsOutbound: true,
            phoneNumberId: "phone_123",
            assignedAgent: {
                agentId: "F3Pbu5gP6NNKBscdCdwB",
                agentName: "My Agent",
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            agent_id: undefined,
            inbound_trunk_config: undefined,
            outbound_trunk_config: undefined,
            livekit_stack: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .patch("/v1/convai/phone-numbers/phone_number_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.phoneNumbers.update("phone_number_id", {
                agentId: undefined,
                inboundTrunkConfig: undefined,
                outboundTrunkConfig: undefined,
                livekitStack: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
