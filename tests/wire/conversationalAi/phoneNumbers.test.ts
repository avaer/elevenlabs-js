/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";

describe("PhoneNumbers", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });

        const rawResponseBody = [
            {
                phone_number: "+1234567890",
                label: "Customer Support",
                phone_number_id: "phone_123",
                assigned_agent: { agent_id: "F3Pbu5gP6NNKBscdCdwB", agent_name: "My Agent" },
                provider: "twilio",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/convai/phone-numbers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.list();
        expect(response).toEqual([
            {
                provider: "twilio",
                phoneNumber: "+1234567890",
                label: "Customer Support",
                phoneNumberId: "phone_123",
                assignedAgent: {
                    agentId: "F3Pbu5gP6NNKBscdCdwB",
                    agentName: "My Agent",
                },
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });
        const rawRequestBody = {
            phone_number: "phone_number",
            label: "label",
            sid: "sid",
            token: "token",
            provider: "twilio",
        };
        const rawResponseBody = { phone_number_id: "phone_number_id" };
        server
            .mockEndpoint()
            .post("/v1/convai/phone-numbers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.create({
            provider: "twilio",
            phoneNumber: "phone_number",
            label: "label",
            sid: "sid",
            token: "token",
        });
        expect(response).toEqual({
            phoneNumberId: "phone_number_id",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });

        const rawResponseBody = {
            phone_number: "+1234567890",
            label: "Customer Support",
            phone_number_id: "phone_123",
            assigned_agent: { agent_id: "F3Pbu5gP6NNKBscdCdwB", agent_name: "My Agent" },
            provider: "twilio",
        };
        server
            .mockEndpoint()
            .get("/v1/convai/phone-numbers/TeaqRRdTcIfIu2i7BYfT")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.get("TeaqRRdTcIfIu2i7BYfT");
        expect(response).toEqual({
            provider: "twilio",
            phoneNumber: "+1234567890",
            label: "Customer Support",
            phoneNumberId: "phone_123",
            assignedAgent: {
                agentId: "F3Pbu5gP6NNKBscdCdwB",
                agentName: "My Agent",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/convai/phone-numbers/TeaqRRdTcIfIu2i7BYfT")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.delete("TeaqRRdTcIfIu2i7BYfT");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });
        const rawRequestBody = {};
        const rawResponseBody = {
            phone_number: "+1234567890",
            label: "Customer Support",
            phone_number_id: "phone_123",
            assigned_agent: { agent_id: "F3Pbu5gP6NNKBscdCdwB", agent_name: "My Agent" },
            provider: "twilio",
        };
        server
            .mockEndpoint()
            .patch("/v1/convai/phone-numbers/TeaqRRdTcIfIu2i7BYfT")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.phoneNumbers.update("TeaqRRdTcIfIu2i7BYfT");
        expect(response).toEqual({
            provider: "twilio",
            phoneNumber: "+1234567890",
            label: "Customer Support",
            phoneNumberId: "phone_123",
            assignedAgent: {
                agentId: "F3Pbu5gP6NNKBscdCdwB",
                agentName: "My Agent",
            },
        });
    });
});
