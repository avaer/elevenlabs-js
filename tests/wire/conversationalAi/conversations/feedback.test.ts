/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";
import * as ElevenLabs from "../../../../src/api/index";

describe("Feedback", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { feedback: "like" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/convai/conversations/21m00Tcm4TlvDq8ikWAM/feedback")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.conversationalAi.conversations.feedback.create("21m00Tcm4TlvDq8ikWAM", {
            feedback: "like",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { feedback: "like" };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/convai/conversations/conversation_id/feedback")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.conversationalAi.conversations.feedback.create("conversation_id", {
                feedback: "like",
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
