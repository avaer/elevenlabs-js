/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";
import * as ElevenLabs from "../../../src/api/index";

describe("CompositionPlan", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { prompt: "prompt" };
        const rawResponseBody = {
            positive_global_styles: ["pop", "rock", "jazz"],
            negative_global_styles: ["metal", "hip-hop", "country"],
            sections: [
                {
                    section_name: "Verse 1",
                    positive_local_styles: ["pop", "rock", "jazz"],
                    negative_local_styles: ["metal", "hip-hop", "country"],
                    duration_ms: 10000,
                    lines: ["Verse 1 lyrics"],
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v1/music/plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.music.compositionPlan.create({
            prompt: "prompt",
        });
        expect(response).toEqual({
            positiveGlobalStyles: ["pop", "rock", "jazz"],
            negativeGlobalStyles: ["metal", "hip-hop", "country"],
            sections: [
                {
                    sectionName: "Verse 1",
                    positiveLocalStyles: ["pop", "rock", "jazz"],
                    negativeLocalStyles: ["metal", "hip-hop", "country"],
                    durationMs: 10000,
                    lines: ["Verse 1 lyrics"],
                },
            ],
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            prompt: "prompt",
            music_length_ms: undefined,
            source_composition_plan: undefined,
            model_id: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/music/plan")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.music.compositionPlan.create({
                prompt: "prompt",
                musicLengthMs: undefined,
                sourceCompositionPlan: undefined,
                modelId: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
