/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../src/Client";

describe("Dubbing", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });

        const rawResponseBody = {
            dubbing_id: "21m00Tcm4TlvDq8ikWAM",
            name: "My Dubbing Project",
            status: "dubbed",
            target_languages: ["es", "fr", "de"],
            media_metadata: { content_type: "video/mp4", duration: 127.5 },
            error: "error",
        };
        server
            .mockEndpoint()
            .get("/v1/dubbing/dubbing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.get("dubbing_id");
        expect(response).toEqual({
            dubbingId: "21m00Tcm4TlvDq8ikWAM",
            name: "My Dubbing Project",
            status: "dubbed",
            targetLanguages: ["es", "fr", "de"],
            mediaMetadata: {
                contentType: "video/mp4",
                duration: 127.5,
            },
            error: "error",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({
            apiKey: "test",
            environment: { base: server.baseUrl, wss: server.baseUrl },
        });

        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .delete("/v1/dubbing/dubbing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.delete("dubbing_id");
        expect(response).toEqual({
            status: "ok",
        });
    });
});
