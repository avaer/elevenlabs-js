/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../src/Client";
import * as ElevenLabs from "../../src/api/index";

describe("Dubbing", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            dubs: [
                {
                    dubbing_id: "21m00Tcm4TlvDq8ikWAM",
                    name: "My Dubbing Project",
                    status: "dubbed",
                    target_languages: ["es", "fr", "de"],
                    editable: true,
                    created_at: "2025-07-15T14:49:41Z",
                    media_metadata: { content_type: "video/mp4", duration: 127.5 },
                    error: "error",
                },
            ],
            next_cursor: "next_cursor",
            has_more: true,
        };
        server.mockEndpoint().get("/v1/dubbing").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.dubbing.list({
            cursor: "cursor",
            pageSize: 1,
            dubbingStatus: "dubbing",
            filterByCreator: "personal",
            orderBy: "created_at",
            orderDirection: "DESCENDING",
        });
        expect(response).toEqual({
            dubs: [
                {
                    dubbingId: "21m00Tcm4TlvDq8ikWAM",
                    name: "My Dubbing Project",
                    status: "dubbed",
                    targetLanguages: ["es", "fr", "de"],
                    editable: true,
                    createdAt: new Date("2025-07-15T14:49:41.000Z"),
                    mediaMetadata: {
                        contentType: "video/mp4",
                        duration: 127.5,
                    },
                    error: "error",
                },
            ],
            nextCursor: "next_cursor",
            hasMore: true,
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server.mockEndpoint().get("/v1/dubbing").respondWith().statusCode(422).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.dubbing.list();
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            dubbing_id: "21m00Tcm4TlvDq8ikWAM",
            name: "My Dubbing Project",
            status: "dubbed",
            target_languages: ["es", "fr", "de"],
            editable: true,
            created_at: "2025-07-15T14:49:41Z",
            media_metadata: { content_type: "video/mp4", duration: 127.5 },
            error: "error",
        };
        server
            .mockEndpoint()
            .get("/v1/dubbing/dubbing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.get("dubbing_id");
        expect(response).toEqual({
            dubbingId: "21m00Tcm4TlvDq8ikWAM",
            name: "My Dubbing Project",
            status: "dubbed",
            targetLanguages: ["es", "fr", "de"],
            editable: true,
            createdAt: new Date("2025-07-15T14:49:41.000Z"),
            mediaMetadata: {
                contentType: "video/mp4",
                duration: 127.5,
            },
            error: "error",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/dubbing/dubbing_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.dubbing.get("dubbing_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .delete("/v1/dubbing/dubbing_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.delete("dubbing_id");
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v1/dubbing/dubbing_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.dubbing.delete("dubbing_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
