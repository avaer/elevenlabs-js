/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";
import * as ElevenLabs from "../../../../src/api/index";

describe("Chapters", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            chapters: [
                {
                    chapter_id: "aw1NgEzBg83R7vgmiJt6",
                    name: "Chapter 1",
                    last_conversion_date_unix: 1714204800,
                    conversion_progress: 0.5,
                    can_be_downloaded: true,
                    state: "converting",
                    has_video: true,
                    statistics: {
                        characters_unconverted: 1000,
                        characters_converted: 500,
                        paragraphs_converted: 20,
                        paragraphs_unconverted: 10,
                    },
                    last_conversion_error: "Error message",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/studio/projects/21m00Tcm4TlvDq8ikWAM/chapters")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.studio.projects.chapters.list("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            chapters: [
                {
                    chapterId: "aw1NgEzBg83R7vgmiJt6",
                    name: "Chapter 1",
                    lastConversionDateUnix: 1714204800,
                    conversionProgress: 0.5,
                    canBeDownloaded: true,
                    state: "converting",
                    hasVideo: true,
                    statistics: {
                        charactersUnconverted: 1000,
                        charactersConverted: 500,
                        paragraphsConverted: 20,
                        paragraphsUnconverted: 10,
                    },
                    lastConversionError: "Error message",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/studio/projects/project_id/chapters")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.studio.projects.chapters.list("project_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "Chapter 1" };
        const rawResponseBody = {
            chapter: {
                chapter_id: "aw1NgEzBg83R7vgmiJt6",
                name: "Chapter 1",
                last_conversion_date_unix: 1714204800,
                conversion_progress: 0.5,
                can_be_downloaded: true,
                state: "default",
                has_video: true,
                statistics: {
                    characters_unconverted: 100,
                    characters_converted: 200,
                    paragraphs_converted: 5,
                    paragraphs_unconverted: 3,
                },
                last_conversion_error: "last_conversion_error",
                content: {
                    blocks: [
                        { block_id: "block_id", nodes: [{ type: "tts_node", voice_id: "voice_id", text: "text" }] },
                    ],
                },
            },
        };
        server
            .mockEndpoint()
            .post("/v1/studio/projects/21m00Tcm4TlvDq8ikWAM/chapters")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.studio.projects.chapters.create("21m00Tcm4TlvDq8ikWAM", {
            name: "Chapter 1",
        });
        expect(response).toEqual({
            chapter: {
                chapterId: "aw1NgEzBg83R7vgmiJt6",
                name: "Chapter 1",
                lastConversionDateUnix: 1714204800,
                conversionProgress: 0.5,
                canBeDownloaded: true,
                state: "default",
                hasVideo: true,
                statistics: {
                    charactersUnconverted: 100,
                    charactersConverted: 200,
                    paragraphsConverted: 5,
                    paragraphsUnconverted: 3,
                },
                lastConversionError: "last_conversion_error",
                content: {
                    blocks: [
                        {
                            blockId: "block_id",
                            nodes: [
                                {
                                    type: "tts_node",
                                    voiceId: "voice_id",
                                    text: "text",
                                },
                            ],
                        },
                    ],
                },
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", from_url: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/studio/projects/project_id/chapters")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.studio.projects.chapters.create("project_id", {
                name: "name",
                fromUrl: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            chapter_id: "aw1NgEzBg83R7vgmiJt6",
            name: "Chapter 1",
            last_conversion_date_unix: 1714204800,
            conversion_progress: 0.5,
            can_be_downloaded: true,
            state: "default",
            has_video: true,
            statistics: {
                characters_unconverted: 100,
                characters_converted: 200,
                paragraphs_converted: 5,
                paragraphs_unconverted: 3,
            },
            last_conversion_error: "last_conversion_error",
            content: {
                blocks: [{ block_id: "block_id", nodes: [{ type: "tts_node", voice_id: "voice_id", text: "text" }] }],
            },
        };
        server
            .mockEndpoint()
            .get("/v1/studio/projects/21m00Tcm4TlvDq8ikWAM/chapters/21m00Tcm4TlvDq8ikWAM")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.studio.projects.chapters.get("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            chapterId: "aw1NgEzBg83R7vgmiJt6",
            name: "Chapter 1",
            lastConversionDateUnix: 1714204800,
            conversionProgress: 0.5,
            canBeDownloaded: true,
            state: "default",
            hasVideo: true,
            statistics: {
                charactersUnconverted: 100,
                charactersConverted: 200,
                paragraphsConverted: 5,
                paragraphsUnconverted: 3,
            },
            lastConversionError: "last_conversion_error",
            content: {
                blocks: [
                    {
                        blockId: "block_id",
                        nodes: [
                            {
                                type: "tts_node",
                                voiceId: "voice_id",
                                text: "text",
                            },
                        ],
                    },
                ],
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/studio/projects/project_id/chapters/chapter_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.studio.projects.chapters.get("project_id", "chapter_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            chapter: {
                chapter_id: "aw1NgEzBg83R7vgmiJt6",
                name: "Chapter 1",
                last_conversion_date_unix: 1714204800,
                conversion_progress: 0.5,
                can_be_downloaded: true,
                state: "default",
                has_video: true,
                statistics: {
                    characters_unconverted: 100,
                    characters_converted: 200,
                    paragraphs_converted: 5,
                    paragraphs_unconverted: 3,
                },
                last_conversion_error: "last_conversion_error",
                content: {
                    blocks: [
                        { block_id: "block_id", nodes: [{ type: "tts_node", voice_id: "voice_id", text: "text" }] },
                    ],
                },
            },
        };
        server
            .mockEndpoint()
            .post("/v1/studio/projects/21m00Tcm4TlvDq8ikWAM/chapters/21m00Tcm4TlvDq8ikWAM")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.studio.projects.chapters.update("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            chapter: {
                chapterId: "aw1NgEzBg83R7vgmiJt6",
                name: "Chapter 1",
                lastConversionDateUnix: 1714204800,
                conversionProgress: 0.5,
                canBeDownloaded: true,
                state: "default",
                hasVideo: true,
                statistics: {
                    charactersUnconverted: 100,
                    charactersConverted: 200,
                    paragraphsConverted: 5,
                    paragraphsUnconverted: 3,
                },
                lastConversionError: "last_conversion_error",
                content: {
                    blocks: [
                        {
                            blockId: "block_id",
                            nodes: [
                                {
                                    type: "tts_node",
                                    voiceId: "voice_id",
                                    text: "text",
                                },
                            ],
                        },
                    ],
                },
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, content: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/studio/projects/project_id/chapters/chapter_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.studio.projects.chapters.update("project_id", "chapter_id", {
                name: undefined,
                content: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .delete("/v1/studio/projects/21m00Tcm4TlvDq8ikWAM/chapters/21m00Tcm4TlvDq8ikWAM")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.studio.projects.chapters.delete("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v1/studio/projects/project_id/chapters/chapter_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.studio.projects.chapters.delete("project_id", "chapter_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("convert (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/studio/projects/21m00Tcm4TlvDq8ikWAM/chapters/21m00Tcm4TlvDq8ikWAM/convert")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.studio.projects.chapters.convert("21m00Tcm4TlvDq8ikWAM", "21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("convert (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/studio/projects/project_id/chapters/chapter_id/convert")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.studio.projects.chapters.convert("project_id", "chapter_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
