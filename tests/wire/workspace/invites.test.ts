/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";
import * as ElevenLabs from "../../../src/api/index";

describe("Invites", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "john.doe@testmail.com" };
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/workspace/invites/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.invites.create({
            email: "john.doe@testmail.com",
        });
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "email", group_ids: undefined, workspace_permission: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/workspace/invites/add")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspace.invites.create({
                email: "email",
                groupIds: undefined,
                workspacePermission: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("create_batch (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { emails: ["emails"] };
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/workspace/invites/add-bulk")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.invites.createBatch({
            emails: ["emails"],
        });
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("create_batch (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { emails: ["emails", "emails"], group_ids: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/workspace/invites/add-bulk")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspace.invites.createBatch({
                emails: ["emails", "emails"],
                groupIds: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "john.doe@testmail.com" };
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .delete("/v1/workspace/invites")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.invites.delete({
            email: "john.doe@testmail.com",
        });
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { email: "email" };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v1/workspace/invites")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspace.invites.delete({
                email: "email",
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
