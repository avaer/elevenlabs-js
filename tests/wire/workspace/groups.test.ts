/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";
import * as ElevenLabs from "../../../src/api/index";

describe("Groups", () => {
    test("search (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "My Workspace Group",
                id: "1234567890",
                members_emails: ["john.doe@example.com", "jane.smith@example.com"],
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/workspace/groups/search")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.workspace.groups.search({
            name: "name",
        });
        expect(response).toEqual([
            {
                name: "My Workspace Group",
                id: "1234567890",
                membersEmails: ["john.doe@example.com", "jane.smith@example.com"],
            },
        ]);
    });

    test("search (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/workspace/groups/search")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.workspace.groups.search({
                name: "name",
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
