/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";
import * as ElevenLabs from "../../../../src/api/index";

describe("Language", () => {
    test("add (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { version: 1 };
        server
            .mockEndpoint()
            .post("/v1/dubbing/resource/dubbing_id/language")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.dubbing.resource.language.add("dubbing_id");
        expect(response).toEqual({
            version: 1,
        });
    });

    test("add (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { language: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/dubbing/resource/dubbing_id/language")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.dubbing.resource.language.add("dubbing_id", {
                language: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
