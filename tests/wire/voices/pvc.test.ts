/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";
import * as ElevenLabs from "../../../src/api/index";

describe("Pvc", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "John Smith", language: "en" };
        const rawResponseBody = { voice_id: "b38kUX8pkfYO2kHyqfFy" };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.create({
            name: "John Smith",
            language: "en",
        });
        expect(response).toEqual({
            voiceId: "b38kUX8pkfYO2kHyqfFy",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", language: "language", description: undefined, labels: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.voices.pvc.create({
                name: "name",
                language: "language",
                description: undefined,
                labels: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { voice_id: "b38kUX8pkfYO2kHyqfFy" };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.update("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            voiceId: "b38kUX8pkfYO2kHyqfFy",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, language: undefined, description: undefined, labels: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/voice_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.voices.pvc.update("voice_id", {
                name: undefined,
                language: undefined,
                description: undefined,
                labels: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("train (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM/train")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.train("21m00Tcm4TlvDq8ikWAM");
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("train (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { model_id: undefined };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/voice_id/train")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.voices.pvc.train("voice_id", {
                modelId: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
