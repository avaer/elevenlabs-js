/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../../src/Client";
import * as ElevenLabs from "../../../../../src/api/index";

describe("Waveform", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { sample_id: "DCwhRBWXzGAHq8TQ4Fs18", visual_waveform: [0.1, 0.2, 0.3, 0.4, 0.5] };
        server
            .mockEndpoint()
            .get("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM/samples/VW7YKqPnjY4h39yTbx2L/waveform")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.samples.waveform.get("21m00Tcm4TlvDq8ikWAM", "VW7YKqPnjY4h39yTbx2L");
        expect(response).toEqual({
            sampleId: "DCwhRBWXzGAHq8TQ4Fs18",
            visualWaveform: [0.1, 0.2, 0.3, 0.4, 0.5],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/voices/pvc/voice_id/samples/sample_id/waveform")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.voices.pvc.samples.waveform.get("voice_id", "sample_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
