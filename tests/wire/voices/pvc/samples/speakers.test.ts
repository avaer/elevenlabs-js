/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../../src/Client";
import * as ElevenLabs from "../../../../../src/api/index";

describe("Speakers", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            voice_id: "DCwhRBWXzGAHq8TQ4Fs18",
            sample_id: "DCwhRBWXzGAHq8TQ4Fs18",
            status: "not_started",
            speakers: {
                key: { speaker_id: "DCwhRBWXzGAHq8TQ4Fs18", duration_secs: 5, utterances: [{ start: 0, end: 1 }] },
            },
            selected_speaker_ids: ["selected_speaker_ids"],
        };
        server
            .mockEndpoint()
            .get("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM/samples/VW7YKqPnjY4h39yTbx2L/speakers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.samples.speakers.get("21m00Tcm4TlvDq8ikWAM", "VW7YKqPnjY4h39yTbx2L");
        expect(response).toEqual({
            voiceId: "DCwhRBWXzGAHq8TQ4Fs18",
            sampleId: "DCwhRBWXzGAHq8TQ4Fs18",
            status: "not_started",
            speakers: {
                key: {
                    speakerId: "DCwhRBWXzGAHq8TQ4Fs18",
                    durationSecs: 5,
                    utterances: [
                        {
                            start: 0,
                            end: 1,
                        },
                    ],
                },
            },
            selectedSpeakerIds: ["selected_speaker_ids"],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/voices/pvc/voice_id/samples/sample_id/speakers")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.voices.pvc.samples.speakers.get("voice_id", "sample_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("separate (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM/samples/VW7YKqPnjY4h39yTbx2L/separate-speakers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.samples.speakers.separate(
            "21m00Tcm4TlvDq8ikWAM",
            "VW7YKqPnjY4h39yTbx2L",
        );
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("separate (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/voice_id/samples/sample_id/separate-speakers")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.voices.pvc.samples.speakers.separate("voice_id", "sample_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
