/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../../src/Client";
import * as ElevenLabs from "../../../../src/api/index";

describe("Samples", () => {
    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { voice_id: "b38kUX8pkfYO2kHyqfFy" };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM/samples/VW7YKqPnjY4h39yTbx2L")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.samples.update("21m00Tcm4TlvDq8ikWAM", "VW7YKqPnjY4h39yTbx2L");
        expect(response).toEqual({
            voiceId: "b38kUX8pkfYO2kHyqfFy",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            remove_background_noise: undefined,
            selected_speaker_ids: undefined,
            trim_start_time: undefined,
            trim_end_time: undefined,
            file_name: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/voices/pvc/voice_id/samples/sample_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.voices.pvc.samples.update("voice_id", "sample_id", {
                removeBackgroundNoise: undefined,
                selectedSpeakerIds: undefined,
                trimStartTime: undefined,
                trimEndTime: undefined,
                fileName: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { status: "ok" };
        server
            .mockEndpoint()
            .delete("/v1/voices/pvc/21m00Tcm4TlvDq8ikWAM/samples/VW7YKqPnjY4h39yTbx2L")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.voices.pvc.samples.delete("21m00Tcm4TlvDq8ikWAM", "VW7YKqPnjY4h39yTbx2L");
        expect(response).toEqual({
            status: "ok",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v1/voices/pvc/voice_id/samples/sample_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.voices.pvc.samples.delete("voice_id", "sample_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
