/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ElevenLabsClient } from "../../../src/Client";
import * as ElevenLabs from "../../../src/api/index";

describe("ApiKeys", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            "api-keys": [
                {
                    name: "name",
                    hint: "hint",
                    key_id: "key_id",
                    service_account_user_id: "service_account_user_id",
                    created_at_unix: 1,
                    is_disabled: true,
                    permissions: ["text_to_speech"],
                    character_limit: 1,
                    character_count: 1,
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/service-accounts/service_account_user_id/api-keys")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.serviceAccounts.apiKeys.list("service_account_user_id");
        expect(response).toEqual({
            apiKeys: [
                {
                    name: "name",
                    hint: "hint",
                    keyId: "key_id",
                    serviceAccountUserId: "service_account_user_id",
                    createdAtUnix: 1,
                    isDisabled: true,
                    permissions: ["text_to_speech"],
                    characterLimit: 1,
                    characterCount: 1,
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .get("/v1/service-accounts/service_account_user_id/api-keys")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.serviceAccounts.apiKeys.list("service_account_user_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", permissions: ["text_to_speech"] };
        const rawResponseBody = { "xi-api-key": "xi-api-key" };
        server
            .mockEndpoint()
            .post("/v1/service-accounts/service_account_user_id/api-keys")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.serviceAccounts.apiKeys.create("service_account_user_id", {
            name: "name",
            permissions: ["text_to_speech"],
        });
        expect(response).toEqual({
            xiApiKey: "xi-api-key",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            permissions: ["text_to_speech", "text_to_speech"],
            character_limit: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .post("/v1/service-accounts/service_account_user_id/api-keys")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.serviceAccounts.apiKeys.create("service_account_user_id", {
                name: "name",
                permissions: ["text_to_speech", "text_to_speech"],
                characterLimit: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/service-accounts/service_account_user_id/api-keys/api_key_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.serviceAccounts.apiKeys.delete("service_account_user_id", "api_key_id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .delete("/v1/service-accounts/service_account_user_id/api-keys/api_key_id")
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.serviceAccounts.apiKeys.delete("service_account_user_id", "api_key_id");
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { is_enabled: true, name: "Sneaky Fox", permissions: ["text_to_speech"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/v1/service-accounts/service_account_user_id/api-keys/api_key_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.serviceAccounts.apiKeys.update("service_account_user_id", "api_key_id", {
            isEnabled: true,
            name: "Sneaky Fox",
            permissions: ["text_to_speech"],
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ElevenLabsClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {
            is_enabled: true,
            name: "name",
            permissions: ["text_to_speech", "text_to_speech"],
            character_limit: undefined,
        };
        const rawResponseBody = { detail: undefined };
        server
            .mockEndpoint()
            .patch("/v1/service-accounts/service_account_user_id/api-keys/api_key_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(422)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.serviceAccounts.apiKeys.update("service_account_user_id", "api_key_id", {
                isEnabled: true,
                name: "name",
                permissions: ["text_to_speech", "text_to_speech"],
                characterLimit: undefined,
            });
        }).rejects.toThrow(ElevenLabs.UnprocessableEntityError);
    });
});
