/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as ElevenLabs from "../../../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../../../errors/index";
import { Content } from "../resources/content/client/Client";
import { Snapshots } from "../resources/snapshots/client/Client";
import { Chapters } from "../resources/chapters/client/Client";
import { PronunciationDictionaries } from "../resources/pronunciationDictionaries/client/Client";

export declare namespace Projects {
    export interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Projects {
    protected _content: Content | undefined;
    protected _snapshots: Snapshots | undefined;
    protected _chapters: Chapters | undefined;
    protected _pronunciationDictionaries: PronunciationDictionaries | undefined;

    constructor(protected readonly _options: Projects.Options = {}) {}

    public get content(): Content {
        return (this._content ??= new Content(this._options));
    }

    public get snapshots(): Snapshots {
        return (this._snapshots ??= new Snapshots(this._options));
    }

    public get chapters(): Chapters {
        return (this._chapters ??= new Chapters(this._options));
    }

    public get pronunciationDictionaries(): PronunciationDictionaries {
        return (this._pronunciationDictionaries ??= new PronunciationDictionaries(this._options));
    }

    /**
     * Returns a list of your Studio projects with metadata.
     *
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.list()
     */
    public list(requestOptions?: Projects.RequestOptions): core.HttpResponsePromise<ElevenLabs.GetProjectsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.GetProjectsResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                "v1/studio/projects",
            ),
            method: "GET",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.0.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as ElevenLabs.GetProjectsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        _response.error.body as ElevenLabs.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling GET /v1/studio/projects.");
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Creates a new Studio project, it can be either initialized as blank, from a document or from a URL.
     *
     * @param {ElevenLabs.studio.BodyCreateStudioProjectV1StudioProjectsPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.create({
     *         name: "name",
     *         default_title_voice_id: "default_title_voice_id",
     *         default_paragraph_voice_id: "default_paragraph_voice_id",
     *         default_model_id: "default_model_id"
     *     })
     */
    public create(
        request: ElevenLabs.studio.BodyCreateStudioProjectV1StudioProjectsPost,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.AddProjectResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: ElevenLabs.studio.BodyCreateStudioProjectV1StudioProjectsPost,
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.AddProjectResponseModel>> {
        const _request = await core.newFormData();
        _request.append("name", request.name);
        _request.append("default_title_voice_id", request.default_title_voice_id);
        _request.append("default_paragraph_voice_id", request.default_paragraph_voice_id);
        _request.append("default_model_id", request.default_model_id);
        if (request.from_url != null) {
            _request.append("from_url", request.from_url);
        }

        if (request.from_document != null) {
            await _request.appendFile("from_document", request.from_document);
        }

        if (request.quality_preset != null) {
            _request.append("quality_preset", request.quality_preset);
        }

        if (request.title != null) {
            _request.append("title", request.title);
        }

        if (request.author != null) {
            _request.append("author", request.author);
        }

        if (request.description != null) {
            _request.append("description", request.description);
        }

        if (request.genres != null) {
            for (const _item of request.genres) {
                _request.append("genres", _item);
            }
        }

        if (request.target_audience != null) {
            _request.append("target_audience", request.target_audience);
        }

        if (request.language != null) {
            _request.append("language", request.language);
        }

        if (request.content_type != null) {
            _request.append("content_type", request.content_type);
        }

        if (request.original_publication_date != null) {
            _request.append("original_publication_date", request.original_publication_date);
        }

        if (request.mature_content != null) {
            _request.append("mature_content", request.mature_content.toString());
        }

        if (request.isbn_number != null) {
            _request.append("isbn_number", request.isbn_number);
        }

        if (request.acx_volume_normalization != null) {
            _request.append("acx_volume_normalization", request.acx_volume_normalization.toString());
        }

        if (request.volume_normalization != null) {
            _request.append("volume_normalization", request.volume_normalization.toString());
        }

        if (request.pronunciation_dictionary_locators != null) {
            for (const _item of request.pronunciation_dictionary_locators) {
                _request.append("pronunciation_dictionary_locators", _item);
            }
        }

        if (request.callback_url != null) {
            _request.append("callback_url", request.callback_url);
        }

        if (request.fiction != null) {
            _request.append("fiction", request.fiction);
        }

        if (request.apply_text_normalization != null) {
            _request.append("apply_text_normalization", request.apply_text_normalization);
        }

        if (request.auto_convert != null) {
            _request.append("auto_convert", request.auto_convert.toString());
        }

        if (request.auto_assign_voices != null) {
            _request.append("auto_assign_voices", request.auto_assign_voices.toString());
        }

        if (request.source_type != null) {
            _request.append("source_type", request.source_type);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                "v1/studio/projects",
            ),
            method: "POST",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.0.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as ElevenLabs.AddProjectResponseModel, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        _response.error.body as ElevenLabs.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling POST /v1/studio/projects.");
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns information about a specific Studio project. This endpoint returns more detailed information about a project than `GET /v1/studio`.
     *
     * @param {string} projectId - The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.get("21m00Tcm4TlvDq8ikWAM")
     */
    public get(
        projectId: string,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.ProjectExtendedResponse> {
        return core.HttpResponsePromise.fromPromise(this.__get(projectId, requestOptions));
    }

    private async __get(
        projectId: string,
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.ProjectExtendedResponse>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                `v1/studio/projects/${encodeURIComponent(projectId)}`,
            ),
            method: "GET",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.0.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as ElevenLabs.ProjectExtendedResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        _response.error.body as ElevenLabs.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling GET /v1/studio/projects/{project_id}.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates the specified Studio project by setting the values of the parameters passed.
     *
     * @param {string} projectId - The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.
     * @param {ElevenLabs.studio.BodyUpdateStudioProjectV1StudioProjectsProjectIdPost} request
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.update("21m00Tcm4TlvDq8ikWAM", {
     *         name: "Project 1",
     *         default_title_voice_id: "21m00Tcm4TlvDq8ikWAM",
     *         default_paragraph_voice_id: "21m00Tcm4TlvDq8ikWAM"
     *     })
     */
    public update(
        projectId: string,
        request: ElevenLabs.studio.BodyUpdateStudioProjectV1StudioProjectsProjectIdPost,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.EditProjectResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__update(projectId, request, requestOptions));
    }

    private async __update(
        projectId: string,
        request: ElevenLabs.studio.BodyUpdateStudioProjectV1StudioProjectsProjectIdPost,
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.EditProjectResponseModel>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                `v1/studio/projects/${encodeURIComponent(projectId)}`,
            ),
            method: "POST",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.0.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as ElevenLabs.EditProjectResponseModel, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        _response.error.body as ElevenLabs.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling POST /v1/studio/projects/{project_id}.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes a Studio project.
     *
     * @param {string} projectId - The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.delete("21m00Tcm4TlvDq8ikWAM")
     */
    public delete(
        projectId: string,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.DeleteProjectResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__delete(projectId, requestOptions));
    }

    private async __delete(
        projectId: string,
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.DeleteProjectResponseModel>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                `v1/studio/projects/${encodeURIComponent(projectId)}`,
            ),
            method: "DELETE",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.0.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as ElevenLabs.DeleteProjectResponseModel,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        _response.error.body as ElevenLabs.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling DELETE /v1/studio/projects/{project_id}.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Starts conversion of a Studio project and all of its chapters.
     *
     * @param {string} projectId - The ID of the project to be used. You can use the [List projects](/docs/api-reference/studio/get-projects) endpoint to list all the available projects.
     * @param {Projects.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.studio.projects.convert("21m00Tcm4TlvDq8ikWAM")
     */
    public convert(
        projectId: string,
        requestOptions?: Projects.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.ConvertProjectResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__convert(projectId, requestOptions));
    }

    private async __convert(
        projectId: string,
        requestOptions?: Projects.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.ConvertProjectResponseModel>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                `v1/studio/projects/${encodeURIComponent(projectId)}/convert`,
            ),
            method: "POST",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.0.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as ElevenLabs.ConvertProjectResponseModel,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        _response.error.body as ElevenLabs.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling POST /v1/studio/projects/{project_id}/convert.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
