/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../../index";
import * as stream from "stream";
import * as serializers from "../../../../serialization/index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";

export declare namespace SpeechToSpeech {
    export interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class SpeechToSpeech {
    constructor(protected readonly _options: SpeechToSpeech.Options = {}) {}

    /**
     * Transform audio from one voice to another. Maintain full control over emotion, timing and delivery.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    public convert(
        voiceId: string,
        request: ElevenLabs.BodySpeechToSpeechV1SpeechToSpeechVoiceIdPost,
        requestOptions?: SpeechToSpeech.RequestOptions,
    ): core.HttpResponsePromise<stream.Readable> {
        return core.HttpResponsePromise.fromPromise(this.__convert(voiceId, request, requestOptions));
    }

    private async __convert(
        voiceId: string,
        request: ElevenLabs.BodySpeechToSpeechV1SpeechToSpeechVoiceIdPost,
        requestOptions?: SpeechToSpeech.RequestOptions,
    ): Promise<core.WithRawResponse<stream.Readable>> {
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (request.enableLogging != null) {
            _queryParams["enable_logging"] = request.enableLogging.toString();
        }

        if (request.optimizeStreamingLatency != null) {
            _queryParams["optimize_streaming_latency"] = request.optimizeStreamingLatency.toString();
        }

        if (request.outputFormat != null) {
            _queryParams["output_format"] = serializers.SpeechToSpeechConvertRequestOutputFormat.jsonOrThrow(
                request.outputFormat,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        const _request = await core.newFormData();
        await _request.appendFile("audio", request.audio);
        if (request.modelId != null) {
            _request.append("model_id", request.modelId);
        }

        if (request.voiceSettings != null) {
            _request.append("voice_settings", request.voiceSettings);
        }

        if (request.seed != null) {
            _request.append("seed", request.seed.toString());
        }

        if (request.removeBackgroundNoise != null) {
            _request.append("remove_background_noise", request.removeBackgroundNoise.toString());
        }

        if (request.fileFormat != null) {
            _request.append(
                "file_format",
                serializers.SpeechToSpeechConvertRequestFileFormat.jsonOrThrow(request.fileFormat, {
                    unrecognizedObjectKeys: "strip",
                }),
            );
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                `v1/speech-to-speech/${encodeURIComponent(voiceId)}`,
            ),
            method: "POST",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.1.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            queryParameters: _queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling POST /v1/speech-to-speech/{voice_id}.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Stream audio from one voice to another. Maintain full control over emotion, timing and delivery.
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     */
    public stream(
        voiceId: string,
        request: ElevenLabs.BodySpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPost,
        requestOptions?: SpeechToSpeech.RequestOptions,
    ): core.HttpResponsePromise<stream.Readable> {
        return core.HttpResponsePromise.fromPromise(this.__stream(voiceId, request, requestOptions));
    }

    private async __stream(
        voiceId: string,
        request: ElevenLabs.BodySpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPost,
        requestOptions?: SpeechToSpeech.RequestOptions,
    ): Promise<core.WithRawResponse<stream.Readable>> {
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (request.enableLogging != null) {
            _queryParams["enable_logging"] = request.enableLogging.toString();
        }

        if (request.optimizeStreamingLatency != null) {
            _queryParams["optimize_streaming_latency"] = request.optimizeStreamingLatency.toString();
        }

        if (request.outputFormat != null) {
            _queryParams["output_format"] = serializers.SpeechToSpeechStreamRequestOutputFormat.jsonOrThrow(
                request.outputFormat,
                { unrecognizedObjectKeys: "strip" },
            );
        }

        const _request = await core.newFormData();
        await _request.appendFile("audio", request.audio);
        if (request.modelId != null) {
            _request.append("model_id", request.modelId);
        }

        if (request.voiceSettings != null) {
            _request.append("voice_settings", request.voiceSettings);
        }

        if (request.seed != null) {
            _request.append("seed", request.seed.toString());
        }

        if (request.removeBackgroundNoise != null) {
            _request.append("remove_background_noise", request.removeBackgroundNoise.toString());
        }

        if (request.fileFormat != null) {
            _request.append(
                "file_format",
                serializers.SpeechToSpeechStreamRequestFileFormat.jsonOrThrow(request.fileFormat, {
                    unrecognizedObjectKeys: "strip",
                }),
            );
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher<stream.Readable>({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                `v1/speech-to-speech/${encodeURIComponent(voiceId)}/stream`,
            ),
            method: "POST",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.1.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.1.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            queryParameters: _queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            responseType: "streaming",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 240000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        serializers.HttpValidationError.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling POST /v1/speech-to-speech/{voice_id}/stream.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
