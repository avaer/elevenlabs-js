/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as ElevenLabs from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import { Conversations } from "../resources/conversations/client/Client";
import { Twilio } from "../resources/twilio/client/Client";
import { Agents } from "../resources/agents/client/Client";
import { PhoneNumbers } from "../resources/phoneNumbers/client/Client";
import { KnowledgeBase } from "../resources/knowledgeBase/client/Client";
import { Settings } from "../resources/settings/client/Client";
import { Secrets } from "../resources/secrets/client/Client";
import { BatchCalls } from "../resources/batchCalls/client/Client";
import { SipTrunk } from "../resources/sipTrunk/client/Client";
import { Dashboard } from "../resources/dashboard/client/Client";

export declare namespace ConversationalAi {
    export interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class ConversationalAi {
    protected _conversations: Conversations | undefined;
    protected _twilio: Twilio | undefined;
    protected _agents: Agents | undefined;
    protected _phoneNumbers: PhoneNumbers | undefined;
    protected _knowledgeBase: KnowledgeBase | undefined;
    protected _settings: Settings | undefined;
    protected _secrets: Secrets | undefined;
    protected _batchCalls: BatchCalls | undefined;
    protected _sipTrunk: SipTrunk | undefined;
    protected _dashboard: Dashboard | undefined;

    constructor(protected readonly _options: ConversationalAi.Options = {}) {}

    public get conversations(): Conversations {
        return (this._conversations ??= new Conversations(this._options));
    }

    public get twilio(): Twilio {
        return (this._twilio ??= new Twilio(this._options));
    }

    public get agents(): Agents {
        return (this._agents ??= new Agents(this._options));
    }

    public get phoneNumbers(): PhoneNumbers {
        return (this._phoneNumbers ??= new PhoneNumbers(this._options));
    }

    public get knowledgeBase(): KnowledgeBase {
        return (this._knowledgeBase ??= new KnowledgeBase(this._options));
    }

    public get settings(): Settings {
        return (this._settings ??= new Settings(this._options));
    }

    public get secrets(): Secrets {
        return (this._secrets ??= new Secrets(this._options));
    }

    public get batchCalls(): BatchCalls {
        return (this._batchCalls ??= new BatchCalls(this._options));
    }

    public get sipTrunk(): SipTrunk {
        return (this._sipTrunk ??= new SipTrunk(this._options));
    }

    public get dashboard(): Dashboard {
        return (this._dashboard ??= new Dashboard(this._options));
    }

    /**
     * Upload a file or webpage URL to create a knowledge base document. <br> <Note> After creating the document, update the agent's knowledge base by calling [Update agent](/docs/conversational-ai/api-reference/agents/update-agent). </Note>
     *
     * @param {ElevenLabs.BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.addToKnowledgeBase({})
     */
    public addToKnowledgeBase(
        request: ElevenLabs.BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost,
        requestOptions?: ConversationalAi.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.AddKnowledgeBaseResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__addToKnowledgeBase(request, requestOptions));
    }

    private async __addToKnowledgeBase(
        request: ElevenLabs.BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost,
        requestOptions?: ConversationalAi.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.AddKnowledgeBaseResponseModel>> {
        const _request = await core.newFormData();
        if (request.name != null) {
            _request.append("name", request.name);
        }

        if (request.url != null) {
            _request.append("url", request.url);
        }

        if (request.file != null) {
            await _request.appendFile("file", request.file);
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                "v1/convai/knowledge-base",
            ),
            method: "POST",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.0.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ..._maybeEncodedRequest.headers,
                ...requestOptions?.headers,
            },
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as ElevenLabs.AddKnowledgeBaseResponseModel,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        _response.error.body as ElevenLabs.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling POST /v1/convai/knowledge-base.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update an existing secret for the workspace
     *
     * @param {string} secretId
     * @param {ElevenLabs.PatchWorkspaceSecretRequest} request
     * @param {ConversationalAi.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.conversationalAi.updateSecret("secret_id", {
     *         name: "name",
     *         value: "value"
     *     })
     */
    public updateSecret(
        secretId: string,
        request: ElevenLabs.PatchWorkspaceSecretRequest,
        requestOptions?: ConversationalAi.RequestOptions,
    ): core.HttpResponsePromise<ElevenLabs.PostWorkspaceSecretResponseModel> {
        return core.HttpResponsePromise.fromPromise(this.__updateSecret(secretId, request, requestOptions));
    }

    private async __updateSecret(
        secretId: string,
        request: ElevenLabs.PatchWorkspaceSecretRequest,
        requestOptions?: ConversationalAi.RequestOptions,
    ): Promise<core.WithRawResponse<ElevenLabs.PostWorkspaceSecretResponseModel>> {
        const _response = await core.fetcher({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (
                        (await core.Supplier.get(this._options.environment)) ??
                        environments.ElevenLabsEnvironment.Production
                    ).base,
                `v1/convai/secrets/${encodeURIComponent(secretId)}`,
            ),
            method: "PATCH",
            headers: {
                "xi-api-key":
                    (await core.Supplier.get(this._options.apiKey)) != null
                        ? await core.Supplier.get(this._options.apiKey)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@elevenlabs/elevenlabs-js",
                "X-Fern-SDK-Version": "v2.0.0",
                "User-Agent": "@elevenlabs/elevenlabs-js/v2.0.0",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: { ...request, type: "update" },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as ElevenLabs.PostWorkspaceSecretResponseModel,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new ElevenLabs.UnprocessableEntityError(
                        _response.error.body as ElevenLabs.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ElevenLabsError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ElevenLabsTimeoutError(
                    "Timeout exceeded when calling PATCH /v1/convai/secrets/{secret_id}.",
                );
            case "unknown":
                throw new errors.ElevenLabsError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }
}
