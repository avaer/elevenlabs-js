/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { Groups } from "../resources/groups/client/Client";
import { Invites } from "../resources/invites/client/Client";
import { Members } from "../resources/members/client/Client";
import { Resources } from "../resources/resources/client/Client";

export declare namespace Workspace {
    export interface Options {
        environment?: core.Supplier<environments.ElevenLabsEnvironment | environments.ElevenLabsEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        /** Override the xi-api-key header */
        apiKey?: core.Supplier<string | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the xi-api-key header */
        apiKey?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Workspace {
    protected _groups: Groups | undefined;
    protected _invites: Invites | undefined;
    protected _members: Members | undefined;
    protected _resources: Resources | undefined;

    constructor(protected readonly _options: Workspace.Options = {}) {}

    public get groups(): Groups {
        return (this._groups ??= new Groups(this._options));
    }

    public get invites(): Invites {
        return (this._invites ??= new Invites(this._options));
    }

    public get members(): Members {
        return (this._members ??= new Members(this._options));
    }

    public get resources(): Resources {
        return (this._resources ??= new Resources(this._options));
    }
}
